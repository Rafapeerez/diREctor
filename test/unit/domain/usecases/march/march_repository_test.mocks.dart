// Mocks generated by Mockito 5.4.4 from annotations
// in director_app_tfg/test/unit/domain/usecases/march/march_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:director_app_tfg/domain/models/march.dart' as _i2;
import 'package:director_app_tfg/domain/repositories/march_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMarch_0 extends _i1.SmartFake implements _i2.March {
  _FakeMarch_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MarchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarchRepository extends _i1.Mock implements _i3.MarchRepository {
  MockMarchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.March> saveMarch(_i2.March? march) => (super.noSuchMethod(
        Invocation.method(
          #saveMarch,
          [march],
        ),
        returnValue: _i4.Future<_i2.March>.value(_FakeMarch_0(
          this,
          Invocation.method(
            #saveMarch,
            [march],
          ),
        )),
      ) as _i4.Future<_i2.March>);

  @override
  _i4.Future<List<_i2.March>> getAllMarchs() => (super.noSuchMethod(
        Invocation.method(
          #getAllMarchs,
          [],
        ),
        returnValue: _i4.Future<List<_i2.March>>.value(<_i2.March>[]),
      ) as _i4.Future<List<_i2.March>>);

  @override
  _i4.Future<_i2.March> updateMarch(_i2.March? march) => (super.noSuchMethod(
        Invocation.method(
          #updateMarch,
          [march],
        ),
        returnValue: _i4.Future<_i2.March>.value(_FakeMarch_0(
          this,
          Invocation.method(
            #updateMarch,
            [march],
          ),
        )),
      ) as _i4.Future<_i2.March>);

  @override
  _i4.Future<void> deleteMarch(String? marchId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMarch,
          [marchId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
