// Mocks generated by Mockito 5.4.4 from annotations
// in director_app_tfg/test/unit/domain/usecases/musician/musician_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:director_app_tfg/domain/models/musician.dart' as _i2;
import 'package:director_app_tfg/domain/repositories/musician_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMusician_0 extends _i1.SmartFake implements _i2.Musician {
  _FakeMusician_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MusicianRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicianRepository extends _i1.Mock
    implements _i3.MusicianRepository {
  MockMusicianRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Musician> saveMusician(_i2.Musician? musician) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMusician,
          [musician],
        ),
        returnValue: _i4.Future<_i2.Musician>.value(_FakeMusician_0(
          this,
          Invocation.method(
            #saveMusician,
            [musician],
          ),
        )),
      ) as _i4.Future<_i2.Musician>);

  @override
  _i4.Future<_i2.Musician?> getMusicianByEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMusicianByEmail,
          [email],
        ),
        returnValue: _i4.Future<_i2.Musician?>.value(),
      ) as _i4.Future<_i2.Musician?>);

  @override
  _i4.Future<List<_i2.Musician>> getAllMusicians() => (super.noSuchMethod(
        Invocation.method(
          #getAllMusicians,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Musician>>.value(<_i2.Musician>[]),
      ) as _i4.Future<List<_i2.Musician>>);

  @override
  _i4.Future<List<_i2.Musician>> getNotAllowedMusicians() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotAllowedMusicians,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Musician>>.value(<_i2.Musician>[]),
      ) as _i4.Future<List<_i2.Musician>>);

  @override
  _i4.Future<_i2.Musician?> updateMusician(_i2.Musician? musician) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMusician,
          [musician],
        ),
        returnValue: _i4.Future<_i2.Musician?>.value(),
      ) as _i4.Future<_i2.Musician?>);

  @override
  _i4.Future<bool> deleteMusician(String? email) => (super.noSuchMethod(
        Invocation.method(
          #deleteMusician,
          [email],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> countNotAllowedMusicians() => (super.noSuchMethod(
        Invocation.method(
          #countNotAllowedMusicians,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> incrementTotalEventsAttendance(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementTotalEventsAttendance,
          [email],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
